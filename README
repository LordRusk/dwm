dwm - dynamic window manager
============================
dwm is an extremely fast, small, and dynamic window manager for X.


Requirements
------------
In order to build dwm you need the Xlib header files.


(Non)-Features
--------------
	1) No default keybinding for launching a terminal.
	2) No trace of dmenu.
	3) Ability cycle layouts with Mod4+Shift+{comma,period).
	4) Ability to push the focused window up or down in the stack.
	5) Actual fullscreen functionality with keybind. Mod4+f
	6) Do not allow the focus to drift from the active fullscreen client when using focusstack().
	7) Borders Inspired by the xmonad feature of the same name.
	8) Awesomebar for functionality.
	9) No Extras!!!!
		9.1) Notice there is no patch for gaps, more bar colors, more layouts, or bar padding. This is because these are not nessacary at all from a utility standpoint. I add what I think is needed, you add the rest.


Patches
-------
	1) Awesomebar
	2) Actualfullscreen
	3) Alwaysfullscreen
	4) Cyclelayouts
	5) Nodmenu
	6) smartborders.
	7) Push


Installation
------------
Edit config.mk to match your local setup (dwm is installed into
the /usr/local namespace by default).

Afterwards enter the following command to build and install dwm (if
necessary as root):

    make clean install


Running dwm
-----------
Add the following line to your .xinitrc to start dwm using startx:

    exec dwm

If you want to be able to restart dwm in an i3 manner, start dwm like this:

    ssh-agent dwm

Whenever you exit dwm [super + shift + e] it will just restart.
If you want to exit to the tty, then you need a keybinding that
kills xorg.

In order to connect dwm to a specific display, make sure that
the DISPLAY environment variable is set correctly, e.g.:

    DISPLAY=foo.bar:1 exec dwm

(This will start dwm on display :1 of the host foo.bar.)

In order to display status info in the bar, you can do something
like this in your .xinitrc:

    while xsetroot -name "`date` `uptime | sed 's/.*,//'`"
    do
    	sleep 1
    done &
    exec dwm

A 'better' alternative would be to use dwmblocks, my config that
work with my scripts can be found on my github.

Another alternative is to just make a shell script that fuctions
like dwmblocks. One of these used to be, and might currently be
in my dotfiles.


Configuration
-------------
The configuration of dwm is done by creating a custom config.h
and (re)compiling the source code.

Harmful
-------
If your wondering, "Why isn't <feature> in this build?" Please
refer to the 'harmful-dwm-features' file in this repository.
